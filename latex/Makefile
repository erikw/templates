# Compile a LaTeX file to different output formats.
# Inspired latexmk(1) usage from: http://tex.stackexchange.com/questions/40738/how-to-properly-make-a-latex-project
NAME=paper
VC=vc.tex

# Force latexmk to always run by making $(NAME).pdf a phony target.
.PHONY: all clean help open wc $(NAME).dvi $(NAME).ps $(NAME).pdf

# target: all - Default target. Cleans and compiles.
#all: $(NAME).pdf  $(NAME).dvi $(NAME).ps # latexmk generates new .dvi even though input files have not changed.
all: $(NAME).pdf

# target: help - Display all targets.
help:
	egrep "#\starget:" [Mm]akefile  | cut -d " " -f3-

# target: clean - Deletes all generated files.
clean:
	latexmk -C |& tail --lines=+3
	$(RM) $(NAME).bbl # Remove Bibtex file.
	$(RM) $(NAME).tpt # Remove PDF thumbnails.
	$(RM) $(VC)

$(NAME).dvi $(NAME).ps: $(NAME).tex
	latexmk -silent -use-make -dvi -ps $<

$(NAME).pdf: $(NAME).tex
	@#latexmk -use-make -pdf -pdflatex="pdflatex -file-line-error -interaction nonstopmode" $< |& tail --lines=+3
	@latexmk -use-make -pdf -pdflatex="pdflatex -file-line-error" $< |& tail --lines=+3

# Called by latexmk. Adding a $(NAME).pdf dependency would cause infinite recursion by latexmk.
$(NAME).tpt:
	thumbpdf $(NAME).pdf

# target: wc - Count real words in the tex file.
wc:
	bin/texcount	$(NAME).tex

# target: cc - Count real characters in the tex file.
cc:
	bin/untex/untex	$(NAME).tex | wc -c

# target open - open the produced PDF file.
open: $(NAME).pdf
	gnome-open $<

# target checkrefs - Check for unused references with https://github.com/cereda/checkcites
checkrefs: $(NAME).aux
	texlua ${HOME}/src/checkcites/checkcites.lua --all $(NAME).aux

# Create eps from dia diagrams.
%.eps: %.dia
	dia --export $@ $<

# TODO break out latex/ to own template git to avid '..'.
# Source: Modified version of
# http://thorehusfeldt.net/2011/05/13/including-git-revision-identifiers-in-latex/
$(NAME).tex: vc.tex
$(VC): $(wildcard ../.git/logs/HEAD ./.git/logs/HEAD)
	echo "%%% This file is generated by Makefile." > $(VC); \
	echo "%%% Do not edit this file!\n%%%" >> $(VC); \
	if git rev-parse --git-dir >/dev/null 2>&1; then \
		git log -1 --format="format: \
			\\gdef\\GITAbrHash{%h} \
			\\gdef\\GITAuthorDate{%ad} \
			\\gdef\\GITAuthorName{%an}" >> $(VC); \
	else \
		printf "%s\n%s\n%s\n" \
		 "\\gdef\\GITAbrHash{NIL}" \
		 "\\gdef\\GITAuthorDate{NIL}" \
		 "\\gdef\\GITAuthorName{NIL}" >> $(VC); \
	fi
